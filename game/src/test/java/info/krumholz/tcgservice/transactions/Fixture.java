package info.krumholz.tcgservice.transactions;

import java.io.IOException;
import java.nio.file.Files;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import org.junit.Assert;

import com.google.common.io.BaseEncoding;

import info.krumholz.dvs.DistributedValueStore;
import info.krumholz.tcgservice.signing.IdentityManager;
import info.krumholz.tcgservice.signing.Signature;
import info.krumholz.tcgservice.signing.Signed;

public class Fixture {

	static final String privateKeyAAsString = "30820276020100300D06092A864886F70D0101010500048202603082025C0201000281810083EA9A9D3F42FD357F5B4EDEF5CBA38579B931282350D8C35C64395BDB0D8F14B8796A372B1BFAC38F036D7F1354985F0BCCF19127B65C49328153B5E6F70B00B4BAA848CA4BB2E0DEE25783AD11AFC6FC11BCB79B99BB194CF9072FAA43F4568984A8CCE897033451362FB3A0EF1419A9AE2F2A9DE8DA0E95BBF7BA80EF959B020301000102818017BD5689C9E2B252B852A444F792E820932142B968719A30BE25C334C69D100CB88E1111508EBE7806FAA4EFE378ABDB1EF288DE887906EE9D4A2CD865723BE667D605CCCB66CD754D047389D29FFF12B595C4FCD0FB9506F2CFB8703DC75196D885875DEAD5174228CAF203A751BF077F1AA295602614F3FDA491211DCC4901024100D34E4CD42DFB82C07649E27B372457425DD07EE879982B16326B7AE472E4BD54852C21583A2ABFE721434C1FFD87E0C6691F177F15ACBD31AAF70E079F5A2BDB0241009FD18EEC9E51A534CD45EB47F7FE3D53ADBE14E70291365AE2D7471897E2DA7E58A4C34A170611BDCBF27B123DEB4B9BE09DA469450B82CAE360871E006B49410240326D45387DA0C01B5E1F53C543EB90476E4C0B7D3F476940EAD76B848946BD48265FD9B54C6C574FB9486E2A543ED10D8898BAEAC129701D2247C3395E760E71024016E880E625E36A1CE177AE3C08AE26B841E54735BDC676D61C41E36D0108816D2EE39F22959E4718BF8D285AFB09293354C503F61AF18573F397B8867264EE81024100BB4684BF199A7DF4D84947C868F8210FC8B2A210CB95D5DB891017C9266A86C984B54CFF9160D750782E7C8E58F4BC02D495223BEDD95C32E2AA5DA96EB39937";
	static final String publicKeyAAsString = "30819F300D06092A864886F70D010101050003818D003081890281810083EA9A9D3F42FD357F5B4EDEF5CBA38579B931282350D8C35C64395BDB0D8F14B8796A372B1BFAC38F036D7F1354985F0BCCF19127B65C49328153B5E6F70B00B4BAA848CA4BB2E0DEE25783AD11AFC6FC11BCB79B99BB194CF9072FAA43F4568984A8CCE897033451362FB3A0EF1419A9AE2F2A9DE8DA0E95BBF7BA80EF959B0203010001";
	static final RSAPublicKey publicKeyA = publicKeyFromBase16String(publicKeyAAsString);
	static final RSAPrivateKey privateKeyA = privateKeyFromBase16String(privateKeyAAsString);
	static final KeyPair keyPairA = new KeyPair(publicKeyA, privateKeyA);

	static final String privateKeyBAsString = "30820276020100300D06092A864886F70D0101010500048202603082025C0201000281810085EA907443754D6F27AEC5D9C1C7613E4A6C82B769A9B7B36FB6CB0BD81B9096C02AFDDF22B61590AD96B1E4F31195B86300C1CCAEE8CCDD1F15E4FD53EE7B579479A2000D093D95F3344C0A844497CFA1247D008B53BD587147169B3797015812C8C3D8D62ED119A8EBA57A8612FD261366C1082DDA7D69DC1F0C27393DC82102030100010281805D0E15BAF4753A8D96E197922D5942756A79E48B56DD1C4D8FBF5170B586D1FE2F22B0AEB10C1E081ED7AC5E0F99949440177293ACA7105447198BB98CED16BF4D43BA424F1A71B5970B9AE7D68AE144E75AAB73A364FAC5E82347D48993CC759FD5CDE769DBA47916BF395D5E4C682A87947190AB72114C590A153C1B6A46C1024100D3C1A7EB9E3938F4A315EE78C30C3202E1273BB80E9A0447DF6CA28012561FB669E6FCC9FE4F0F4359155DBE9F496D667E4A274FEEC2551E728760BB3095BA55024100A1E56C5740B66CBD2563968D2315DC52C2EA319EBFBABEBCC584D3FC7792617470722BCF4706BBFC9C045491EC2C87A3126E31DA14F0D35FF948FAB1C2267A9D024059D9B206A7FC5FCE6DE4C06B3D57CF60A9689C4E5CE3BD2D42003673615469E05CCF4633EF545C85972719BFE8969F74FDE1390D11A223BBE79CC9CEA3AEE48102404C96D8B63E6B0EEE3C6DEC9F4065EB214C0CB704BEF77D9C9864CA54B9CC8A46279C1B95A7A84BEEA9707301C5951B65CE264B773C48E1F6995C291D47182511024100ADEC333D284D99F553561E4EE5B2441B93027B5EC6A80E03B0B7FE47F6DE338DB1CCA01A50ABB898E2AD2F72BE4CEA2A2D67722CBC9ED46B477252A460D0FF69";
	static final String publicKeyBAsString = "30819F300D06092A864886F70D010101050003818D003081890281810085EA907443754D6F27AEC5D9C1C7613E4A6C82B769A9B7B36FB6CB0BD81B9096C02AFDDF22B61590AD96B1E4F31195B86300C1CCAEE8CCDD1F15E4FD53EE7B579479A2000D093D95F3344C0A844497CFA1247D008B53BD587147169B3797015812C8C3D8D62ED119A8EBA57A8612FD261366C1082DDA7D69DC1F0C27393DC8210203010001";
	static final RSAPublicKey publicKeyB = publicKeyFromBase16String(publicKeyBAsString);
	static final RSAPrivateKey privateKeyB = privateKeyFromBase16String(privateKeyBAsString);
	static final KeyPair keyPairB = new KeyPair(publicKeyB, privateKeyB);

	static final String privateKeyCAsString = "30820277020100300D06092A864886F70D0101010500048202613082025D02010002818100842BC99433B1B91AF15F86B33A1E0693CBC7FB2679E89BACF069D6235A15BCEDEB317EDC0F4944BD5CA429AF5DC5D3C426B1CD6D1DE2F87CF6F3D7503F84040B13E813079F2A6F4A06240AF794424F659B6DC09636D444BD9F42090B15C6CCF0D5FC5AFFD09F84D4D6B081FEEE0A79B95CDCFA9CBA18449963466837EA1D999D02030100010281800928F7B97BB3AF7E7C88004FDF91412771121507DF9F0D5AF8F67CCECA69834481EE563A6E1CC7D4CFDCD8BEBCA2FF4032E653B46243DEB0DA749FD181F5664A3C0A9B44EA5214D143F41CE27C1F2BD4888F6C98A90D9EBE314F7C4B1F930687438578AD44D38A0E264A13004092D2E0AE5FBDE876CCFFD6DE831FC64C57F989024100E8FD5502A50D8C80666EBE294CE937606C09FBE2DC97F5462D97C8777ED56A51E2653767FFF4B57FE7F47743EA58908D5097699082A67CA0E62A93EFE2843703024100913976B0E8221EAE86B7D8706F28D9963DB5510A0EEB45AB852F4A7649D4858CAFE9DE56765412FC15D675B054588CE0AD385C9E61BF30061BD3AB2B47293ADF024100C666F3FD4C903D151A2533C9F7B4A1737A8D05F229E73CF685DCBAD90728B56105692BC56430FE5DED2840679527D5F080B06F34A00D2613DDEC640DE2D6B4010240411CCAA2B6F1D55FDAF7430BE64B2283C25731669919D3BAFB942086B8C398BD638230360407DE1B388F57651FEC33FDE8AC849A5EA922171B12E4841AFBD971024100CBC64D9D9FBB89B62E68F0DD29CC65D83312809F87C7B841B25525D3F95B643C3183DBED5A4D160C9BE10D6F8BDD7B676AF3D1D57D20F22FF0FFF8599452C7C6";
	static final String publicKeyCAsString = "30819F300D06092A864886F70D010101050003818D0030818902818100842BC99433B1B91AF15F86B33A1E0693CBC7FB2679E89BACF069D6235A15BCEDEB317EDC0F4944BD5CA429AF5DC5D3C426B1CD6D1DE2F87CF6F3D7503F84040B13E813079F2A6F4A06240AF794424F659B6DC09636D444BD9F42090B15C6CCF0D5FC5AFFD09F84D4D6B081FEEE0A79B95CDCFA9CBA18449963466837EA1D999D0203010001";
	static final RSAPublicKey publicKeyC = publicKeyFromBase16String(publicKeyCAsString);
	static final RSAPrivateKey privateKeyC = privateKeyFromBase16String(privateKeyCAsString);
	static final KeyPair keyPairC = new KeyPair(publicKeyC, privateKeyC);

	static final String privateKeyDAsString = "30820277020100300D06092A864886F70D0101010500048202613082025D02010002818100B1CA2757DF11427DF2436D52727833E32B58B572D496332FA78C175B46146D3CA56270EC9F970D7AA9CFC2C90BE92F069431824A694D37FAF6F0A8596E2F974FE48E6A443A27B757D47A9F84A55E5726B1F2C3213A0D5B5136C43DBA90AB4BEA6F823E4180F3D37B205F7F947D5DCBDEA2C6608A176A078CD5EB818D21140735020301000102818014C229BDD4C9CB1DB17FB5EFFE7592795FC247CD548D0504F76720030437B6597266001160C0DE4E082DBDEC837B82861E1F79BAFE7889A4BFD8718F9F91E6F4B7170CB4B2620C5E9E8B4C39553B9B4890DDD9E1CD514159B93FFA07BB8CBF45800492959857B9827D1509A55A8FC0495EB8BABE1ED80047FFA9D8AC361AA0B1024100E8480EA282D1BDD6638E247004314CF234E12782F737F69A81D5013B44571E031600578139197EE643BDB8080D990E6AFC1F73E42B31D5FD4DF938A09F291097024100C3F1A7EB14A6B5E750BE1606431174964E8D4CF1640D8252858142652670FD84E188C5E472C3EB9773991FA8217235FCB793BD2E198390709EC4A3FCBDA41413024100C0DF645788ACC4270A8F72AE18AD1F2956C3465DB70D9F14F88D77F25072CE16DDE3F6C4F436B96A56016898374249F887D54E13BDD229CFA53935CE199AAD8D0240388D6F9C7EBA5AF7E72AE5AA6B0307B635F7BC44534F3ED4D86965235283FBF7B52C478956C24B25CC1C5EB1A4ED94BD5AB28E4056E6CCF2643076F0043FEDF7024100C33E411FA3903586B0C62A36CA81EECED01B32E0340052ADAC2BEC7B16CFD80DC40480F30F0DB33B799DFDC7C1DFBD09EF6F685554D532F70425584410403ACC";
	static final String publicKeyDAsString = "30819F300D06092A864886F70D010101050003818D0030818902818100B1CA2757DF11427DF2436D52727833E32B58B572D496332FA78C175B46146D3CA56270EC9F970D7AA9CFC2C90BE92F069431824A694D37FAF6F0A8596E2F974FE48E6A443A27B757D47A9F84A55E5726B1F2C3213A0D5B5136C43DBA90AB4BEA6F823E4180F3D37B205F7F947D5DCBDEA2C6608A176A078CD5EB818D211407350203010001";
	static final RSAPublicKey publicKeyD = publicKeyFromBase16String(publicKeyDAsString);
	static final RSAPrivateKey privateKeyD = privateKeyFromBase16String(privateKeyDAsString);
	static final KeyPair keyPairD = new KeyPair(publicKeyD, privateKeyD);

	public static RSAPrivateKey privateKeyFromBase16String(String data) {
		byte[] privateKeyBytes = BaseEncoding.base16().decode(data);
		KeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
		RSAPrivateKey privateKey;
		try {
			privateKey = (RSAPrivateKey) KeyFactory.getInstance("RSA").generatePrivate(privateKeySpec);
		} catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return privateKey;
	}

	public static RSAPublicKey publicKeyFromBase16String(String data) {
		byte[] publicKeyBytes = BaseEncoding.base16().decode(data);
		KeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
		RSAPublicKey publicKey;
		try {
			publicKey = (RSAPublicKey) KeyFactory.getInstance("RSA").generatePublic(publicKeySpec);
		} catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return publicKey;
	}

	public static void sign(RSAPublicKey signeePublicKey, RSAPrivateKey signeePrivateKey, Signed<?> signed) {
		signed.signatures.add(new Signature(signeePublicKey, sign(signeePrivateKey, signed.signable.toBytes())));
	}

	public static byte[] sign(RSAPrivateKey signee, byte[] data) {
		try {
			java.security.Signature signatureFactory = java.security.Signature.getInstance("SHA256withRSA");
			signatureFactory.initSign(signee);
			signatureFactory.update(data);
			final byte[] signatureBytes = signatureFactory.sign();
			return signatureBytes;
		} catch (InvalidKeyException | NoSuchAlgorithmException | SignatureException e) {
			Assert.fail();
			throw new RuntimeException(e);
		}
	}

	public static IdentityManager createIdentityManager() throws NoSuchAlgorithmException {
		IdentityManager identityManager = new IdentityManager();
		identityManager.init();
		return identityManager;
	}

	public static DistributedValueStore createDvs() throws IOException {
		DistributedValueStore dvs = new DistributedValueStore();
		dvs.setStorageDirectory(Files.createTempDirectory("dvs"));
		dvs.init();
		return dvs;
	}

	public static TransactionManager createTransactionManager(IdentityManager identityManager,
			DistributedValueStore dvs) {
		TransactionManager transactionManager = new TransactionManager();
		transactionManager.identityManager = identityManager;
		transactionManager.dvs = dvs;
		return transactionManager;
	}
}
